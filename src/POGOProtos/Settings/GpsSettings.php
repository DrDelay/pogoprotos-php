<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Settings/GpsSettings.php');

namespace POGOProtos\Settings {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Settings.GpsSettings
  final class GpsSettings extends ProtobufMessage {

    private $_unknown;
    private $drivingWarningSpeedMetersPerSecond = 0; // optional float driving_warning_speed_meters_per_second = 1
    private $drivingWarningCooldownMinutes = 0; // optional float driving_warning_cooldown_minutes = 2
    private $drivingSpeedSampleIntervalSeconds = 0; // optional float driving_speed_sample_interval_seconds = 3
    private $drivingSpeedSampleCount = 0; // optional int32 driving_speed_sample_count = 4

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional float driving_warning_speed_meters_per_second = 1
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->drivingWarningSpeedMetersPerSecond = $tmp;

            break;
          case 2: // optional float driving_warning_cooldown_minutes = 2
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->drivingWarningCooldownMinutes = $tmp;

            break;
          case 3: // optional float driving_speed_sample_interval_seconds = 3
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->drivingSpeedSampleIntervalSeconds = $tmp;

            break;
          case 4: // optional int32 driving_speed_sample_count = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->drivingSpeedSampleCount = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->drivingWarningSpeedMetersPerSecond !== 0) {
        fwrite($fp, "\x0d", 1);
        Protobuf::write_float($fp, $this->drivingWarningSpeedMetersPerSecond);
      }
      if ($this->drivingWarningCooldownMinutes !== 0) {
        fwrite($fp, "\x15", 1);
        Protobuf::write_float($fp, $this->drivingWarningCooldownMinutes);
      }
      if ($this->drivingSpeedSampleIntervalSeconds !== 0) {
        fwrite($fp, "\x1d", 1);
        Protobuf::write_float($fp, $this->drivingSpeedSampleIntervalSeconds);
      }
      if ($this->drivingSpeedSampleCount !== 0) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->drivingSpeedSampleCount);
      }
    }

    public function size() {
      $size = 0;
      if ($this->drivingWarningSpeedMetersPerSecond !== 0) {
        $size += 5;
      }
      if ($this->drivingWarningCooldownMinutes !== 0) {
        $size += 5;
      }
      if ($this->drivingSpeedSampleIntervalSeconds !== 0) {
        $size += 5;
      }
      if ($this->drivingSpeedSampleCount !== 0) {
        $size += 1 + Protobuf::size_varint($this->drivingSpeedSampleCount);
      }
      return $size;
    }

    public function clearDrivingWarningSpeedMetersPerSecond() { $this->drivingWarningSpeedMetersPerSecond = 0; }
    public function getDrivingWarningSpeedMetersPerSecond() { return $this->drivingWarningSpeedMetersPerSecond;}
    public function setDrivingWarningSpeedMetersPerSecond($value) { $this->drivingWarningSpeedMetersPerSecond = $value; }

    public function clearDrivingWarningCooldownMinutes() { $this->drivingWarningCooldownMinutes = 0; }
    public function getDrivingWarningCooldownMinutes() { return $this->drivingWarningCooldownMinutes;}
    public function setDrivingWarningCooldownMinutes($value) { $this->drivingWarningCooldownMinutes = $value; }

    public function clearDrivingSpeedSampleIntervalSeconds() { $this->drivingSpeedSampleIntervalSeconds = 0; }
    public function getDrivingSpeedSampleIntervalSeconds() { return $this->drivingSpeedSampleIntervalSeconds;}
    public function setDrivingSpeedSampleIntervalSeconds($value) { $this->drivingSpeedSampleIntervalSeconds = $value; }

    public function clearDrivingSpeedSampleCount() { $this->drivingSpeedSampleCount = 0; }
    public function getDrivingSpeedSampleCount() { return $this->drivingSpeedSampleCount;}
    public function setDrivingSpeedSampleCount($value) { $this->drivingSpeedSampleCount = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('driving_warning_speed_meters_per_second', $this->drivingWarningSpeedMetersPerSecond, 0)
           . Protobuf::toString('driving_warning_cooldown_minutes', $this->drivingWarningCooldownMinutes, 0)
           . Protobuf::toString('driving_speed_sample_interval_seconds', $this->drivingSpeedSampleIntervalSeconds, 0)
           . Protobuf::toString('driving_speed_sample_count', $this->drivingSpeedSampleCount, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Settings.GpsSettings)
  }

}