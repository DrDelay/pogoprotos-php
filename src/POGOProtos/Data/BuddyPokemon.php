<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Data/BuddyPokemon.php');

namespace POGOProtos\Data {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;

  // message POGOProtos.Data.BuddyPokemon
  final class BuddyPokemon extends ProtobufMessage {

    private $_unknown;
    private $id = 0; // optional fixed64 id = 1
    private $startKmWalked = 0; // optional double start_km_walked = 2
    private $lastKmAwarded = 0; // optional double last_km_awarded = 3

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional fixed64 id = 1
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_uint64($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_unint64 returned false');
            $this->id = $tmp;

            break;
          case 2: // optional double start_km_walked = 2
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->startKmWalked = $tmp;

            break;
          case 3: // optional double last_km_awarded = 3
            if($wire !== 1) {
              throw new \Exception("Incorrect wire format for field $field, expected: 1 got: $wire");
            }
            $tmp = Protobuf::read_double($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_double returned false');
            $this->lastKmAwarded = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->id !== 0) {
        fwrite($fp, "\x09", 1);
        Protobuf::write_uint64($fp, $this->id);
      }
      if ($this->startKmWalked !== 0) {
        fwrite($fp, "\x11", 1);
        Protobuf::write_double($fp, $this->startKmWalked);
      }
      if ($this->lastKmAwarded !== 0) {
        fwrite($fp, "\x19", 1);
        Protobuf::write_double($fp, $this->lastKmAwarded);
      }
    }

    public function size() {
      $size = 0;
      if ($this->id !== 0) {
        $size += 9;
      }
      if ($this->startKmWalked !== 0) {
        $size += 9;
      }
      if ($this->lastKmAwarded !== 0) {
        $size += 9;
      }
      return $size;
    }

    public function clearId() { $this->id = 0; }
    public function getId() { return $this->id;}
    public function setId($value) { $this->id = $value; }

    public function clearStartKmWalked() { $this->startKmWalked = 0; }
    public function getStartKmWalked() { return $this->startKmWalked;}
    public function setStartKmWalked($value) { $this->startKmWalked = $value; }

    public function clearLastKmAwarded() { $this->lastKmAwarded = 0; }
    public function getLastKmAwarded() { return $this->lastKmAwarded;}
    public function setLastKmAwarded($value) { $this->lastKmAwarded = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('id', $this->id, 0)
           . Protobuf::toString('start_km_walked', $this->startKmWalked, 0)
           . Protobuf::toString('last_km_awarded', $this->lastKmAwarded, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Data.BuddyPokemon)
  }

}