<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Envelopes/ResponseEnvelope.php');

namespace POGOProtos\Networking\Envelopes {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;


  // message POGOProtos.Networking.Envelopes.ResponseEnvelope
  final class ResponseEnvelope extends ProtobufMessage {

    private $_unknown;
    private $statusCode = 0; // optional int32 status_code = 1
    private $requestId = 0; // optional uint64 request_id = 2
    private $apiUrl = ""; // optional string api_url = 3
    private $unknown6 = array(); // repeated .POGOProtos.Networking.Envelopes.Unknown6Response unknown6 = 6
    private $authTicket = null; // optional .POGOProtos.Networking.Envelopes.AuthTicket auth_ticket = 7
    private $returns = array(); // repeated bytes returns = 100
    private $error = ""; // optional string error = 101

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional int32 status_code = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->statusCode = $tmp;

            break;
          case 2: // optional uint64 request_id = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->requestId = $tmp;

            break;
          case 3: // optional string api_url = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->apiUrl = $tmp;

            break;
          case 6: // repeated .POGOProtos.Networking.Envelopes.Unknown6Response unknown6 = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->unknown6[] = new \POGOProtos\Networking\Envelopes\Unknown6Response($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\Unknown6Response did not read the full length');

            break;
          case 7: // optional .POGOProtos.Networking.Envelopes.AuthTicket auth_ticket = 7
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->authTicket = new \POGOProtos\Networking\Envelopes\AuthTicket($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Envelopes\AuthTicket did not read the full length');

            break;
          case 100: // repeated bytes returns = 100
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->returns[] = $tmp;

            break;
          case 101: // optional string error = 101
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->error = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->statusCode !== 0) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->statusCode);
      }
      if ($this->requestId !== 0) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->requestId);
      }
      if ($this->apiUrl !== "") {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, strlen($this->apiUrl));
        fwrite($fp, $this->apiUrl);
      }
      foreach($this->unknown6 as $v) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->authTicket !== null) {
        fwrite($fp, ":", 1);
        Protobuf::write_varint($fp, $this->authTicket->size());
        $this->authTicket->write($fp);
      }
      foreach($this->returns as $v) {
        fwrite($fp, "\xa2\x06", 2);
        Protobuf::write_varint($fp, strlen($v));
        fwrite($fp, $v);
      }
      if ($this->error !== "") {
        fwrite($fp, "\xaa\x06", 2);
        Protobuf::write_varint($fp, strlen($this->error));
        fwrite($fp, $this->error);
      }
    }

    public function size() {
      $size = 0;
      if ($this->statusCode !== 0) {
        $size += 1 + Protobuf::size_varint($this->statusCode);
      }
      if ($this->requestId !== 0) {
        $size += 1 + Protobuf::size_varint($this->requestId);
      }
      if ($this->apiUrl !== "") {
        $l = strlen($this->apiUrl);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->unknown6 as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->authTicket !== null) {
        $l = $this->authTicket->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->returns as $v) {
        $l = strlen($v);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      if ($this->error !== "") {
        $l = strlen($this->error);
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearStatusCode() { $this->statusCode = 0; }
    public function getStatusCode() { return $this->statusCode;}
    public function setStatusCode($value) { $this->statusCode = $value; }

    public function clearRequestId() { $this->requestId = 0; }
    public function getRequestId() { return $this->requestId;}
    public function setRequestId($value) { $this->requestId = $value; }

    public function clearApiUrl() { $this->apiUrl = ""; }
    public function getApiUrl() { return $this->apiUrl;}
    public function setApiUrl($value) { $this->apiUrl = $value; }

    public function clearUnknown6() { $this->unknown6 = array(); }
    public function getUnknown6Count() { return count($this->unknown6); }
    public function getUnknown6($index) { return $this->unknown6[$index]; }
    public function getUnknown6Array() { return $this->unknown6; }
    public function setUnknown6($index, array $value) {$this->unknown6[$index] = $value; }
    public function addUnknown6(array $value) { $this->unknown6[] = $value; }
    public function addAllUnknown6(array $values) { foreach($values as $value) {$this->unknown6[] = $value; }}

    public function clearAuthTicket() { $this->authTicket = null; }
    public function getAuthTicket() { return $this->authTicket;}
    public function setAuthTicket(\POGOProtos\Networking\Envelopes\AuthTicket $value) { $this->authTicket = $value; }

    public function clearReturns() { $this->returns = array(); }
    public function getReturnsCount() { return count($this->returns); }
    public function getReturns($index) { return $this->returns[$index]; }
    public function getReturnsArray() { return $this->returns; }
    public function setReturns($index, array $value) {$this->returns[$index] = $value; }
    public function addReturns(array $value) { $this->returns[] = $value; }
    public function addAllReturns(array $values) { foreach($values as $value) {$this->returns[] = $value; }}

    public function clearError() { $this->error = ""; }
    public function getError() { return $this->error;}
    public function setError($value) { $this->error = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('status_code', $this->statusCode, 0)
           . Protobuf::toString('request_id', $this->requestId, 0)
           . Protobuf::toString('api_url', $this->apiUrl, "")
           . Protobuf::toString('unknown6', $this->unknown6, null)
           . Protobuf::toString('auth_ticket', $this->authTicket, null)
           . Protobuf::toString('returns', $this->returns, "")
           . Protobuf::toString('error', $this->error, "");
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Envelopes.ResponseEnvelope)
  }

}