<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('POGOProtos/Networking/Platform/Responses/GetStoreItemsResponse.php');

namespace POGOProtos\Networking\Platform\Responses {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufIO;
  use ProtobufMessage;




  // message POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry
  final class GetStoreItemsResponse_StoreItem_TagsEntry extends ProtobufMessage {

    private $_unknown;
    private $key = ""; // optional string key = 1
    private $value = ""; // optional string value = 2

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string key = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->key = $tmp;

            break;
          case 2: // optional string value = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->value = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->key !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->key));
        fwrite($fp, $this->key);
      }
      if ($this->value !== "") {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, strlen($this->value));
        fwrite($fp, $this->value);
      }
    }

    public function size() {
      $size = 0;
      if ($this->key !== "") {
        $l = strlen($this->key);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->value !== "") {
        $l = strlen($this->value);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearKey() { $this->key = ""; }
    public function getKey() { return $this->key;}
    public function setKey($value) { $this->key = $value; }

    public function clearValue() { $this->value = ""; }
    public function getValue() { return $this->value;}
    public function setValue($value) { $this->value = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('key', $this->key, "")
           . Protobuf::toString('value', $this->value, "");
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem.TagsEntry)
  }

  // message POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem
  final class GetStoreItemsResponse_StoreItem extends ProtobufMessage {

    private $_unknown;
    private $itemId = ""; // optional string item_id = 1
    private $isIap = false; // optional bool is_iap = 2
    private $currencyToBuy = null; // optional .POGOProtos.Data.Player.Currency currency_to_buy = 3
    private $yieldsCurrency = null; // optional .POGOProtos.Data.Player.Currency yields_currency = 4
    private $yieldsItem = null; // optional .POGOProtos.Inventory.Item.ItemData yields_item = 5
    private $tags = array(); // map<string, string> tags = 6
    private $unknown7 = 0; // optional int32 unknown7 = 7

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional string item_id = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->itemId = $tmp;

            break;
          case 2: // optional bool is_iap = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->isIap = ($tmp > 0) ? true : false;

            break;
          case 3: // optional .POGOProtos.Data.Player.Currency currency_to_buy = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->currencyToBuy = new \POGOProtos\Data\Player\Currency($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Player\Currency did not read the full length');

            break;
          case 4: // optional .POGOProtos.Data.Player.Currency yields_currency = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->yieldsCurrency = new \POGOProtos\Data\Player\Currency($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Player\Currency did not read the full length');

            break;
          case 5: // optional .POGOProtos.Inventory.Item.ItemData yields_item = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->yieldsItem = new \POGOProtos\Inventory\Item\ItemData($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Inventory\Item\ItemData did not read the full length');

            break;
          case 6: // map<string, string> tags = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->tags[] = new \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse_StoreItem_TagsEntry($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse_StoreItem_TagsEntry did not read the full length');

            break;
          case 7: // optional int32 unknown7 = 7
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_signed_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_INT32 || $tmp > Protobuf::MAX_INT32) throw new \Exception('int32 out of range');$this->unknown7 = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->itemId !== "") {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->itemId));
        fwrite($fp, $this->itemId);
      }
      if ($this->isIap !== false) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->isIap ? 1 : 0);
      }
      if ($this->currencyToBuy !== null) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->currencyToBuy->size());
        $this->currencyToBuy->write($fp);
      }
      if ($this->yieldsCurrency !== null) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $this->yieldsCurrency->size());
        $this->yieldsCurrency->write($fp);
      }
      if ($this->yieldsItem !== null) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, $this->yieldsItem->size());
        $this->yieldsItem->write($fp);
      }
      foreach($this->tags as $v) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->unknown7 !== 0) {
        fwrite($fp, "8", 1);
        Protobuf::write_varint($fp, $this->unknown7);
      }
    }

    public function size() {
      $size = 0;
      if ($this->itemId !== "") {
        $l = strlen($this->itemId);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->isIap !== false) {
        $size += 2;
      }
      if ($this->currencyToBuy !== null) {
        $l = $this->currencyToBuy->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->yieldsCurrency !== null) {
        $l = $this->yieldsCurrency->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->yieldsItem !== null) {
        $l = $this->yieldsItem->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->tags as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->unknown7 !== 0) {
        $size += 1 + Protobuf::size_varint($this->unknown7);
      }
      return $size;
    }

    public function clearItemId() { $this->itemId = ""; }
    public function getItemId() { return $this->itemId;}
    public function setItemId($value) { $this->itemId = $value; }

    public function clearIsIap() { $this->isIap = false; }
    public function getIsIap() { return $this->isIap;}
    public function setIsIap($value) { $this->isIap = $value; }

    public function clearCurrencyToBuy() { $this->currencyToBuy = null; }
    public function getCurrencyToBuy() { return $this->currencyToBuy;}
    public function setCurrencyToBuy(\POGOProtos\Data\Player\Currency $value) { $this->currencyToBuy = $value; }

    public function clearYieldsCurrency() { $this->yieldsCurrency = null; }
    public function getYieldsCurrency() { return $this->yieldsCurrency;}
    public function setYieldsCurrency(\POGOProtos\Data\Player\Currency $value) { $this->yieldsCurrency = $value; }

    public function clearYieldsItem() { $this->yieldsItem = null; }
    public function getYieldsItem() { return $this->yieldsItem;}
    public function setYieldsItem(\POGOProtos\Inventory\Item\ItemData $value) { $this->yieldsItem = $value; }

    public function clearTags() { $this->tags = array(); }
    public function getTagsCount() { return count($this->tags); }
    public function getTags($index) { return $this->tags[$index]; }
    public function getTagsArray() { return $this->tags; }
    public function setTags($index, array $value) {$this->tags[$index] = $value; }
    public function addTags(array $value) { $this->tags[] = $value; }
    public function addAllTags(array $values) { foreach($values as $value) {$this->tags[] = $value; }}

    public function clearUnknown7() { $this->unknown7 = 0; }
    public function getUnknown7() { return $this->unknown7;}
    public function setUnknown7($value) { $this->unknown7 = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('item_id', $this->itemId, "")
           . Protobuf::toString('is_iap', $this->isIap, false)
           . Protobuf::toString('currency_to_buy', $this->currencyToBuy, null)
           . Protobuf::toString('yields_currency', $this->yieldsCurrency, null)
           . Protobuf::toString('yields_item', $this->yieldsItem, null)
           . Protobuf::toString('tags', $this->tags, null)
           . Protobuf::toString('unknown7', $this->unknown7, 0);
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem)
  }

  // enum POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.Status
  abstract class GetStoreItemsResponse_Status extends ProtobufEnum {
    const UNDEFINED = 0;
    const OKAY = 1;

    public static $_values = array(
      0 => "UNDEFINED",
      1 => "OKAY",
    );

    public static function isValid($value) {
      return array_key_exists($value, self::$_values);
    }

    public static function toString($value) {
      checkArgument(is_int($value), 'value must be a integer');
      if (array_key_exists($value, self::$_values))
        return self::$_values[$value];
      return 'UNKNOWN';
    }
  }

  // message POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse
  final class GetStoreItemsResponse extends ProtobufMessage {

    private $_unknown;
    private $status = \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse_Status::UNDEFINED; // optional .POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.Status status = 1
    private $items = array(); // repeated .POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem items = 2
    private $playerCurrencies = array(); // repeated .POGOProtos.Data.Player.Currency player_currencies = 3
    private $unknown4 = ""; // optional string unknown4 = 4

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional .POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.Status status = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->status = $tmp;

            break;
          case 2: // repeated .POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse.StoreItem items = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->items[] = new \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse_StoreItem($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse_StoreItem did not read the full length');

            break;
          case 3: // repeated .POGOProtos.Data.Player.Currency player_currencies = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->playerCurrencies[] = new \POGOProtos\Data\Player\Currency($fp, $len);
            if ($len !== 0) throw new \Exception('new \POGOProtos\Data\Player\Currency did not read the full length');

            break;
          case 4: // optional string unknown4 = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->unknown4 = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
    }

    public function write($fp) {
      if ($this->status !== \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse_Status::UNDEFINED) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->status);
      }
      foreach($this->items as $v) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      foreach($this->playerCurrencies as $v) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $v->size());
        $v->write($fp);
      }
      if ($this->unknown4 !== "") {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, strlen($this->unknown4));
        fwrite($fp, $this->unknown4);
      }
    }

    public function size() {
      $size = 0;
      if ($this->status !== \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse_Status::UNDEFINED) {
        $size += 1 + Protobuf::size_varint($this->status);
      }
      foreach($this->items as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->playerCurrencies as $v) {
        $l = $v->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if ($this->unknown4 !== "") {
        $l = strlen($this->unknown4);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function clearStatus() { $this->status = \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse_Status::UNDEFINED; }
    public function getStatus() { return $this->status;}
    public function setStatus($value) { $this->status = $value; }

    public function clearItems() { $this->items = array(); }
    public function getItemsCount() { return count($this->items); }
    public function getItems($index) { return $this->items[$index]; }
    public function getItemsArray() { return $this->items; }
    public function setItems($index, array $value) {$this->items[$index] = $value; }
    public function addItems(array $value) { $this->items[] = $value; }
    public function addAllItems(array $values) { foreach($values as $value) {$this->items[] = $value; }}

    public function clearPlayerCurrencies() { $this->playerCurrencies = array(); }
    public function getPlayerCurrenciesCount() { return count($this->playerCurrencies); }
    public function getPlayerCurrencies($index) { return $this->playerCurrencies[$index]; }
    public function getPlayerCurrenciesArray() { return $this->playerCurrencies; }
    public function setPlayerCurrencies($index, array $value) {$this->playerCurrencies[$index] = $value; }
    public function addPlayerCurrencies(array $value) { $this->playerCurrencies[] = $value; }
    public function addAllPlayerCurrencies(array $values) { foreach($values as $value) {$this->playerCurrencies[] = $value; }}

    public function clearUnknown4() { $this->unknown4 = ""; }
    public function getUnknown4() { return $this->unknown4;}
    public function setUnknown4($value) { $this->unknown4 = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('status', $this->status, \POGOProtos\Networking\Platform\Responses\GetStoreItemsResponse_Status::UNDEFINED)
           . Protobuf::toString('items', $this->items, null)
           . Protobuf::toString('player_currencies', $this->playerCurrencies, null)
           . Protobuf::toString('unknown4', $this->unknown4, "");
    }

    // @@protoc_insertion_point(class_scope:POGOProtos.Networking.Platform.Responses.GetStoreItemsResponse)
  }

}